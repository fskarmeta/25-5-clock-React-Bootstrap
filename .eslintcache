[{"C:\\Users\\fskar\\Desktop\\clock-25-5-fcc\\src\\index.js":"1","C:\\Users\\fskar\\Desktop\\clock-25-5-fcc\\src\\App.js":"2"},{"size":460,"mtime":1610088699436,"results":"3","hashOfConfig":"4"},{"size":5348,"mtime":1610095146951,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"1fcn6ll",{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\Users\\fskar\\Desktop\\clock-25-5-fcc\\src\\index.js",[],["12","13"],"C:\\Users\\fskar\\Desktop\\clock-25-5-fcc\\src\\App.js",["14"],"import React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst iconStyle = {\n  cursor: \"pointer\",\n};\n\nconst audioSrc =\n  \"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\";\n\nexport function App() {\n  const [display, setDisplay] = useState(25 * 60);\n  const [breakLength, setBreakLength] = useState(5 * 60);\n  const [sessionLength, setSessionLength] = useState(25 * 60);\n  const [timerOn, setTimerOn] = useState(false);\n  const [onBreak, setOnBreak] = useState(false);\n  const [breakAudio, setBreakAudio] = useState(new Audio(audioSrc));\n\n  const breakSound = () => {\n    breakAudio.currentTime = 0;\n    breakAudio.play();\n  };\n\n  const formatDisplayTime = (time) => {\n    let mins = Math.floor(time / 60);\n    let secs = time % 60;\n    return (\n      (mins < 10 ? \"0\" + mins : mins) + \":\" + (secs < 10 ? \"0\" + secs : secs)\n    );\n  };\n\n  const formatTime = (time) => {\n    return time / 60;\n  };\n\n  const updateTime = (amount, type) => {\n    if (type === \"break\") {\n      if (breakLength <= 60 && amount < 0) {\n        return;\n      }\n      setBreakLength((prev) => prev + amount);\n    } else {\n      if (sessionLength <= 60 && amount < 0) {\n        return;\n      }\n      setSessionLength((prev) => prev + amount);\n      if (!timerOn) {\n        setDisplay(sessionLength + amount);\n      }\n    }\n  };\n\n  const timeControl = () => {\n    let second = 1000;\n    let date = new Date().getTime();\n    let nextDate = new Date().getTime() + second;\n    let onBreakVariable = onBreak;\n    if (!timerOn) {\n      let interval = setInterval(() => {\n        date = new Date().getTime();\n        if (date > nextDate) {\n          setDisplay((prev) => {\n            if (prev <= 0 && !onBreakVariable) {\n              breakSound();\n              onBreakVariable = true;\n              setOnBreak(true);\n              return breakLength;\n            } else if (prev <= 0 && onBreakVariable) {\n              breakSound();\n              onBreakVariable = false;\n              setOnBreak(false);\n              return sessionLength;\n            }\n            return prev - 1;\n          });\n          nextDate += second;\n        }\n      }, 30);\n      localStorage.clear();\n      localStorage.setItem(\"interval-id\", interval);\n    }\n    if (timerOn) {\n      clearInterval(localStorage.getItem(\"interval-id\"));\n    }\n    setTimerOn(!timerOn);\n  };\n\n  const resetTime = () => {\n    setDisplay(25 * 60);\n    setBreakLength(5 * 60);\n    setSessionLength(25 * 60);\n  };\n\n  return (\n    <div className=\"container App\">\n      <div className=\"row\">\n        <h1 className=\"title display-3 m-5 col-md-12 text-center\">\n          Pomodoro Clock\n        </h1>\n      </div>\n\n      <div className=\"row double d-flex\">\n        <LengthComponent\n          title={\"Break Length\"}\n          updateTime={updateTime}\n          time={breakLength}\n          formatTime={formatTime}\n          type={\"break\"}\n        />\n        <LengthComponent\n          title={\"Session Length\"}\n          updateTime={updateTime}\n          time={sessionLength}\n          formatTime={formatTime}\n          type={\"session\"}\n        />\n      </div>\n      <div className=\"row\">\n        <div className=\"clock col-md-12 d-flex justify-content-center\">\n          <div className=\"border p-5 rounded\">\n            <h2 className=\"text-center disply-4\" id=\"timer-label\">\n              {onBreak ? \"Break\" : \"Session\"}\n            </h2>\n            <h1 className=\"timer display-1\" id=\"time-left\">\n              {formatDisplayTime(display)}\n            </h1>\n          </div>\n        </div>\n        <div className=\"col-md-12\">\n          <div className=\"buttons d-flex justify-content-center align-content-center mt-3\">\n            <span id=\"start_stop\" onClick={timeControl}>\n              {timerOn ? (\n                <i class=\"fas fa-pause fa-4x m-3\" style={iconStyle}></i>\n              ) : (\n                <i\n                  class=\"fas fa-play fa-4x m-3\"\n                  style={iconStyle}\n                  id=\"start_stop\"\n                ></i>\n              )}\n            </span>\n            <i\n              class=\"fas fa-sync-alt fa-4x m-3\"\n              style={iconStyle}\n              id=\"reset\"\n              onClick={resetTime}\n            ></i>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction LengthComponent({ title, updateTime, type, time, formatTime }) {\n  return (\n    <div className=\"col-md-6\">\n      <h1 id={type === \"break\" ? \"break-label\" : \"session-label\"}>{title}</h1>\n      <div className=\"d-flex justify-content-center align-items-center\">\n        <div className=\"arrow\">\n          <i\n            className=\"fas fa-arrow-circle-up fa-4x\"\n            id={type === \"break\" ? \"break-increment\" : \"session-increment\"}\n            style={iconStyle}\n            onClick={() => updateTime(60, type)}\n          ></i>\n        </div>\n        <h3\n          className=\"m-5 display-4\"\n          id={type === \"break\" ? \"break-length\" : \"session-length\"}\n        >\n          {formatTime(time)}\n        </h3>\n        <div className=\"arrow\">\n          <i\n            className=\"fas fa-arrow-circle-down fa-4x\"\n            id={type === \"break\" ? \"break-decrement\" : \"session-decrement\"}\n            style={iconStyle}\n            onClick={() => updateTime(-60, type)}\n          ></i>\n        </div>\n      </div>\n    </div>\n  );\n}\n",{"ruleId":"15","replacedBy":"16"},{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","severity":1,"message":"20","line":17,"column":22,"nodeType":"21","messageId":"22","endLine":17,"endColumn":35},"no-native-reassign",["23"],"no-negated-in-lhs",["24"],"no-unused-vars","'setBreakAudio' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]